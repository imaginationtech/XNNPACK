// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CHANNEL_TILE >= 1
$assert VARIANT in ("FMAGIC", "IMAGIC", "LRINTF")
#include <assert.h>

#include <xnnpack/common.h>
#include <xnnpack/math.h>
#include <xnnpack/reduce.h>


$PARAMS_STRUCT = "fp32_scalar_" + VARIANT.lower()
$MIN_F32 = "__builtin_wasm_min_f32" if WASM else "math_min_f32"
$MAX_F32 = "__builtin_wasm_max_f32" if WASM else "math_max_f32"
void xnn_qs8_rsum_minmax_${REQUANTIZATION.lower()}_ukernel__scalar_${VARIANT.lower()}_u${CHANNEL_TILE}(
    size_t batch,
    const int8_t* restrict input,
    int8_t* restrict output,
    const union xnn_qs8_avgpool_minmax_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(input != NULL);
  assert(output != NULL);

  const int32_t vinit_bias = params->${PARAMS_STRUCT}.init_bias;
  $for A in range(ACCUMULATORS):
    int32_t vacc${A} = vinit_bias;
  $if CHANNEL_TILE == 1:
    do {
      const int32_t vt = (int32_t) *input++;
      vacc0 += vt;
      batch -= sizeof(int8_t);
    } while (batch != 0);
  $else:
    for (; batch >= ${CHANNEL_TILE}; batch -= ${CHANNEL_TILE}) {
      $for N in range(CHANNEL_TILE):
        const int32_t vt${N} = (int32_t) input[${N}];
      input += ${CHANNEL_TILE};

      $for N in range(CHANNEL_TILE):
        vacc${N % ACCUMULATORS} += vt${N};
    }
    $if ACCUMULATORS > 1:
      $ACC_SLICE = 1
      $while ACC_SLICE < ACCUMULATORS:
        $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
          $if A + ACC_SLICE < ACCUMULATORS:
            vacc${A} += vacc${A + ACC_SLICE};
        $ACC_SLICE *= 2

    if XNN_UNLIKELY(batch != 0) {
      $if CHANNEL_TILE == 2:
        const int32_t vt = (int32_t) *input;
        vacc0 += vt;
      $else:
        do {
          const int32_t vt = (int32_t) *input++;
          vacc0 += vt;
          batch -= sizeof(int8_t);
        } while (batch != 0);
    }

  const float vscale = params->${PARAMS_STRUCT}.scale;
  $if VARIANT == "FMAGIC":
    const float voutput_min_less_zero_point = params->fp32_scalar_fmagic.output_min_less_zero_point;
    const float voutput_max_less_zero_point = params->fp32_scalar_fmagic.output_max_less_zero_point;
    const float vmagic_bias = params->fp32_scalar_fmagic.magic_bias;
    const int32_t vmagic_bias_less_output_zero_point = params->fp32_scalar_fmagic.magic_bias_less_output_zero_point;
  $elif VARIANT == "IMAGIC":
    const float vmagic_bias = params->fp32_scalar_imagic.magic_bias;
    const int32_t vmagic_min = params->fp32_scalar_imagic.magic_min;
    const int32_t vmagic_max = params->fp32_scalar_imagic.magic_max;
    const int32_t vmagic_bias_less_zero_point = params->fp32_scalar_imagic.magic_bias_less_zero_point;
  $elif VARIANT == "LRINTF":
    const float voutput_min_less_zero_point = params->fp32_scalar_lrintf.output_min_less_zero_point;
    const float voutput_max_less_zero_point = params->fp32_scalar_lrintf.output_max_less_zero_point;
    const int32_t voutput_zero_point = params->fp32_scalar_lrintf.output_zero_point;

  float vfpacc = (float) vacc0 * vscale;
  $if VARIANT == "FMAGIC":
    vfpacc = ${MAX_F32}(vfpacc, voutput_min_less_zero_point);
    vfpacc = ${MIN_F32}(vfpacc, voutput_max_less_zero_point);
    vfpacc += vmagic_bias;
    int32_t vout = (int32_t) float_as_uint32(vfpacc) - vmagic_bias_less_output_zero_point;
  $elif VARIANT == "IMAGIC":
    vfpacc += vmagic_bias;
    int32_t vout = (int32_t) float_as_uint32(vfpacc);
    vout = math_max_s32(vout, vmagic_min);
    vout = math_min_s32(vout, vmagic_max);
    vout -= vmagic_bias_less_zero_point;
  $elif VARIANT == "LRINTF":
    vfpacc = ${MAX_F32}(vfpacc, voutput_min_less_zero_point);
    vfpacc = ${MIN_F32}(vfpacc, voutput_max_less_zero_point);
    const int32_t vrndacc = (int32_t) lrintf(vfpacc);
    int32_t vout = vrndacc + voutput_zero_point;

  *output += (int8_t) vout;
}
