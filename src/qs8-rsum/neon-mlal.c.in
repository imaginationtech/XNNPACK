// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CHANNEL_TILE % 4 == 0
$assert CHANNEL_TILE >= 4
$SIMD_TILE = CHANNEL_TILE // 8
$assert ACCUMULATORS <= SIMD_TILE
$import math
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <arm_neon.h>

#include <xnnpack/common.h>
#include <xnnpack/math.h>
#include <xnnpack/reduce.h>

$ACC_SUFFIX = "" if ACCUMULATORS == 1 else "_acc%d" % ACCUMULATORS
$PARAMS_STRUCT = REQUANTIZATION.lower() + "_" + ("neonv8" if ARMV8 else "neon")
void xnn_qs8_rsum_minmax_${REQUANTIZATION.lower()}_ukernel__neon_mlal_u${CHANNEL_TILE}${ACC_SUFFIX}(
    size_t batch,
    const int8_t* input,
    int8_t* output,
    const union xnn_qs8_avgpool_minmax_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(batch != 0);
  assert(input != NULL);
  assert(output != NULL);

  int8x8_t vone = vdup_n_s8(1);
  int num_batches = batch  >> ${(int(math.log2(ACCUMULATORS * 256)))};
  $for A in range(ACCUMULATORS):
    int32x4_t vacc${A} = vmovq_n_s32(0);
  $if CHANNEL_TILE > 8:
    for (; num_batches > 0; --num_batches) {
      $for A in range(ACCUMULATORS):
        int16x8_t vacc16_${A} = vmovq_n_s16(0);
      for (size_t current_batch = ${ACCUMULATORS * 256}; current_batch > 0; current_batch -= ${CHANNEL_TILE}) {
        $for N in range(SIMD_TILE):
          const int8x8_t vt${N} = vld1_s8(input); input += 8;

        $for N in range(SIMD_TILE):
          vacc16_${N % ACCUMULATORS} = vmlal_s8(vacc16_${N % ACCUMULATORS}, vt${N}, vone);
      }
      $for A in range(ACCUMULATORS):
        vacc${A} = vaddq_s32(vacc${A}, vaddq_s32(vmovl_s16(vget_low_s16(vacc16_${A})), vmovl_s16(vget_high_s16(vacc16_${A}))));
      batch -= ${ACCUMULATORS * 256};
    }
  if (XNN_UNLIKELY(batch != 0)) {
    $for A in range(ACCUMULATORS):
      int16x8_t vacc16_${A} = vmovq_n_s16(0);
    for (; batch >= ${CHANNEL_TILE}; batch -= ${CHANNEL_TILE}) {
      $for N in range(SIMD_TILE):
        const int8x8_t vt${N} = vld1_s8(input); input += 8;
      $for N in range(SIMD_TILE):
        vacc16_${N % ACCUMULATORS} = vmlal_s8(vacc16_${N % ACCUMULATORS}, vt${N}, vone);
    }
    $for A in range(1, ACCUMULATORS):
      vacc16_0 = vaddq_s16(vacc16_0, vacc16_${A});
    for (; batch >= 8; batch -= 8) {
      const int8x8_t vt = vld1_s8(input); input += 8;
      vacc16_0 = vmlal_s8(vacc16_0, vt, vone);
    }
    if (XNN_UNLIKELY(batch != 0)) {
      int8x8_t vt = vld1_s8(input);
      vone = vld1_s8(&params->fp32_neon.mask_table[7 - batch]);
      vacc16_0 = vmlal_s8(vacc16_0, vt, vone);
    }
    vacc0 = vaddq_s32(vacc0, vaddq_s32(vmovl_s16(vget_low_s16(vacc16_0)), vmovl_s16(vget_high_s16(vacc16_0))));
  }
  $if ACCUMULATORS > 1:
    $ACC_SLICE = 1
    $while ACC_SLICE < ACCUMULATORS:
      $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
        $if A + ACC_SLICE < ACCUMULATORS:
          vacc${A} = vaddq_s32(vacc${A}, vacc${A + ACC_SLICE});
      $ACC_SLICE *= 2
  int32x2_t vacc_lo = vadd_s32(vget_low_s32(vacc0), vget_high_s32(vacc0));
  vacc_lo = vpadd_s32(vacc_lo, vacc_lo);

  $if REQUANTIZATION == "FP32":
    const int32_t vinit_bias = params->fp32_neon.init_bias;
    const float vscale = params->${PARAMS_STRUCT}.scale;
    const int32_t output_min = params->fp32_neon.output_min;
    const int32_t output_max = params->fp32_neon.output_max;
    const float vmagic_bias = params->fp32_neon.magic_bias;
    const int32_t vmagic_bias_less_output_zero_point = params->fp32_neon.magic_bias_less_output_zero_point;
  $elif REQUANTIZATION == "RNDNU":
    const int32x4_t vleft_pre_shift = vld1q_dup_s32(&params->rndnu_neon.left_pre_shift);
    const int32x4_t vmultiplier = vld1q_dup_s32(&params->rndnu_neon.multiplier);
    const int32x4_t vleft_post_shift = vld1q_dup_s32(&params->rndnu_neon.left_post_shift);
    const int16x8_t voutput_zero_point = vld1q_dup_s16(&params->rndnu_neon.output_zero_point);

  float vfpacc = (float) (vget_lane_s32(vacc_lo, 0) + vinit_bias) * vscale;
  vfpacc += vmagic_bias;
  int32_t vout = (int32_t) float_as_uint32(vfpacc);
  vout -= vmagic_bias_less_output_zero_point;
  vout = math_max_s32(vout, output_min);
  vout = math_min_s32(vout, output_max);
  *output += (int8_t) vout;
}
